---
description: 
globs: 
alwaysApply: false
---
# pr-review ルール（mcp/GitHub API対応・AIレビュワー明記版）

## 概要

このルールは、GitHub（mcp API）経由でPRの差分・コミット・ファイルリストを取得し、AIレビュワーとしてdiff付きの辛口レビューコメントをPRに自動投稿する一連の流れを定義します。

---

## 使い方

1. 対象のブランチを `git checkout` でチェックアウトする（ブランチ名取得のみローカルgitコマンド可）。
2. PR番号または現在のブランチ名を指定し、mcp経由でGitHubからPR情報・差分・コミット・ファイルリストを取得。
3. 取得した情報をもとに、**AIレビュワーとして必ず名乗った上で**、diff付きの辛口レビューコメントをPRに投稿。
4. コメントには必ず「指摘箇所のdiff」と「具体的な指摘・理由・改善案」をセットで記載する。
5. **必ず「Files changed」タブの該当行（差分行）に直接コメントすること。全体コメントではなく、該当するコード行にピンポイントでレビューを残す運用とする。**

---

## 実行フロー（自動化される処理）

1. `git branch --show-current` で現在のブランチ名を取得（ローカル）
2. mcp APIで該当PR番号を特定
3. mcp APIでmainとの差分・コミットログ・ファイル変更リストを取得
4. 取得した情報をもとに、
   - 変更の目的・主な変更点・影響範囲を日本語で要約
   - **AIレビュワーであることをコメント冒頭で必ず名乗る**
   - 指摘箇所のdiffを明示し、具体的な指摘・理由・改善案を記載
   - **「Files changed」タブの該当行（差分行）に直接コメントする**
   - 辛口レビューコメントをPRに投稿

---

## コメント例

```
AIコードレビュワーのShunsuke Assistantです。以下、辛口レビュー（diff付き）をお送りします。

---

### 指摘箇所のdiff
```diff
@@ -15,5 +15,9 @@
     end
+
+    def test
+      render json: { status: 'success', message: 'テストメールを送信しました' }
+    end
   end
 end
```

### 指摘内容
1. **本番環境に不要なテスト用エンドポイントは極力残さないこと**
   - 上記diffの `def test ... end` 部分は、テスト目的であれば開発環境限定で有効化するか、マージ前に削除してください。
   - セキュリティリスク（認証なしでアクセス可能なAPIが増える）や、将来的なメンテナンスコスト増加の原因になります。
2. **責務分離**
   - テスト用APIは本来のコントローラーに混在させず、専用のコントローラーや名前空間で管理することを推奨します。
3. **コメント・ドキュメント**
   - テスト用のコードには必ずコメントで用途・削除予定の旨を明記してください。

---

#### 総評
- 今回はmcp連携・テンプレート検証のためのダミーPRとのことですが、本番コードにテスト用エンドポイントを安易に追加する運用は避けてください。
- テストコードや検証用APIは、開発効率とセキュリティ・品質のバランスを意識して管理しましょう。

---

ご参考までに！
```

---

## 注意事項
- mcp（GitHub API）経由で取得できる情報のみを利用する。
- コメント冒頭で必ずAIレビュワーであることを名乗る。
- diffと指摘内容は必ずセットで記載。
- **必ず「Files changed」タブの該当行（差分行）に直接コメントすること。全体コメントではなく、該当するコード行にピンポイントでレビューを残すこと。**
- 差分が取得できた部分以外のコードの指摘はしない。
- テンプレートや出力フォーマットは現行ルールに準拠。
- 変更内容が大きい場合は、diff・指摘を要点に絞る。
- コンフリクトが発生している場合は、先に解決する。
- **このルールや他のルールファイルを参照・読んだ際は、必ず「◯◯ルールを読みました」や「@gh-pr-review.mdc を参照しました」など、読んだことを冒頭で明示すること。**
